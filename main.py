from aiogram import Bot, Dispatcher, executor, types
from keyboards import UpdateKeyboard, keyboards, buttons
from config import API_TOKEN, admins, chat_id
import schedule
from multiprocessing.context import Process
import time
import requests
from db_requests import SQLRequests, conn, cursor
import datetime

today = datetime.datetime.today()
now = today.strftime("%Y-%m-%d-%H.%M")


r = requests.Session()
logs = {}

MALLING_STATUS = False


#–ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyb = UpdateKeyboard(keyboards, buttons).start_keyboard()
general_admin_keyb = UpdateKeyboard(keyboards, buttons).admin_general_keyboard()

all_users = {}

bot = Bot(API_TOKEN)
dp = Dispatcher(bot)

users_what_pay_access = {}

@dp.message_handler(commands = ['start'])
async def starting (message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start"""
    global today, now

    if message.from_user.id in all_users.keys():
        pass
    else:
        SQLRequests(conn, cursor).write_new_user(message.from_user.id, 
                                                message.from_user.first_name, 
                                                message.from_user.username, 
                                                'Pass', 
                                                'Pass')
        get_all_users_in_start()


    await message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup = start_keyb )


@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–øüîê")
async def why_but_access(message: types.Message):
    
    await message.answer("–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ:\n\n–ù–æ–º–µ—Ä –ö–∞—Ä—Ç—ã:\n4890494693625188\n\n"\
                        "üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ —Å –∫–∞—Ä—Ç—ã:\nhttp://bit.ly/to_card\n\n"\
                        "üì± Qiwi: +79061007766\nüíµ –Ø–Ω–¥–µ–∫—Å –î–µ–Ω—å–≥–∏: 410011650372076\n\n"\
                        "(–º–æ–∂–Ω–æ —Å–æ —Å–±–µ—Ä–æ–Ω–ª–∞–π–Ω:  –ü–ª–∞—Ç–µ–∂–∏ > –û—Å—Ç–∞–ª—å–Ω–æ–µ > –≤ –ø–æ–∏—Å–∫–µ –≤–≤–µ—Å—Ç–∏ —è–Ω–¥–µ–∫—Å –¥–µ–Ω—å–≥–∏)\n\n"\
                        "‚ö†Ô∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –ª—Å @bet_market\n\n"\
                        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª/–ø—Ä–æ–¥–ª–∏–ªüí∞¬ª –Ω–∏–∂–µ. \n–ü—Ä–æ–≤–µ—Ä—é –∏ –≤—ã–¥–∞–º –¥–æ—Å—Ç—É–ø.")



@dp.message_handler(lambda message: message.text == "–Ø –æ–ø–ª–∞—Ç–∏–ª/–ø—Ä–æ–¥–ª–∏–ªüí∞")
async def buy_access(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ø –æ–ø–ª–∞—Ç–∏–ªüí∞"""

    format_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø\n\n"\
                     f"ID: {message.from_user.id}\n"\
                     f"–ò–º—è: {message.from_user.first_name}\n"\
                     f"@{message.from_user.username}\n\n"\
                     f"–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã–¥–∞–µ–º?"
    
    to_admin_keyb = UpdateKeyboard(keyboards, buttons).add_days_button_for_user(str(message.from_user.id))


    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ...")
    await bot.send_message(366954921, format_message, reply_markup=to_admin_keyb)

@dp.callback_query_handler(lambda c: c.data.startswith("add_days_"))
async def add_days_for_user(c: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    cut_c_data_for_add_days = c.data.split("_")

    link = await bot.export_chat_invite_link(chat_id=chat_id)

    link_button = UpdateKeyboard(keyboards, buttons).create_invite_link(cut_c_data_for_add_days[2], link)

    user_Id = str(cut_c_data_for_add_days[2])
    name = all_users[int(cut_c_data_for_add_days[2])]["Name"]
    username = all_users[int(cut_c_data_for_add_days[2])]["Username"]
    action = "–í—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è: "
    
    SQLRequests(conn, cursor).add_action(now, action, user_Id, name, username)

    await bot.send_message(int(cut_c_data_for_add_days[2]), f"–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"\
                                                            f"–î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç –Ω–∞ <b>{cut_c_data_for_add_days[3]} –¥–Ω–µ–π</b>\n\n"\
                                                            f"{link}"
                                                            ,parse_mode='html', reply_markup=link_button)


@dp.callback_query_handler(lambda c: c.data in ["new_malling",
                                                "action_history",
                                                "add_all_1_day"])

async def react_admin_general_button(message:types.Message):
    """–†–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    global MALLING_STATUS

    if c.from_user.id in admins:

        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""

        if c.data == "new_malling"
            MALLING_STATUS = True
            admin_buttons = UpdateKeyboard(keyboards, buttons).add_admin_buttons("Malling")
            await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                                "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤!</b>"
                                parse_mode='html')
        
        elif c.data == "new_malling" and MALLING_STATUS == True:
            await message.answer("–Ø —É–∂–µ –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...")
    

        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        if c.data == "action_history":
            admin_buttons = UpdateKeyboard(keyboards, buttons).add_admin_buttons("History")

            await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å–º–æ—Ç—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é?", reply_markup=admin_buttons)
        

        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º +1 –¥–µ–Ω—å –∫ –¥–æ—Å—Ç—É–ø—É –≤ –∫–∞–Ω–∞–ª"""
        if c.data == "add_all_1_day":
            admin_buttons = UpdateKeyboard(keyboards, buttons).add_admin_buttons("Add_All_1_Day")

            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º +1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª?", reply_markup=admin_buttons)



    

@dp.callback_query_handler(lambda c: c.data in ["access_malling", 
                                                "decline_malling",
                                                "view_history_1", 
                                                "view_history_7", 
                                                "view_history_30",
                                                "access_add_all_one_day",
                                                "decline_add_all_one_day"])

async def admin_access_and_sort_buttons(c: types.CallbackQuery):
    """–†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π"""


    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if c.data == "access_malling":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
    elif c.data == "decline_malling":
        MALLING_STATUS = False
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")



@dp.message_handler(content_types = ['text'])
async def get_text_for_malling(message: types.Message)





@dp.callback_query_handler(lambda c: c.data.startswith("decline_"))
async def decline_days_for_user(c: types.CallbackQuery):
    cut_c_data = c.data.split('_')
    await bot.delete_message(c.from_user.id, c.message.message_id)

    await bot.send_message(int(cut_c_data[1]), "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    
    await bot.send_message(c.from_user.id, f"–û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –¥–ª—è {cut_c_data[1]}")

    


@dp.message_handler(lambda message: message.text == "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–ºüì≤")
async def communication_with_the_operator(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–ºüì≤"""

    await message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏—Ç–µ –≤ –ª—Å –º–µ–Ω–µ–¥–∂–µ—Ä @bet_market –∏–ª–∏ WhatsApp +7906107766")



@dp.message_handler(commands = ['admin'])
async def admin_menu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""

    if message.from_user.id in admins:
        await message.answer("–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=general_admin_keyb)


def get_all_users_and_logs_in_start():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–ª–æ–≤–∞—Ä—å"""

    users = SQLRequests(conn, cursor).get_users()

    for info in users:
        all_users[info[0]] =     {"ID":info[0], 
                                  "Name":info[1], 
                                  "Username":info[2], 
                                  "Status":info[3],
                                  "Date":info[4]}

    logs_from_db = SQLRequests(conn.cursor).load_actions_from_database()
    if logs_from_db:
        for log in logs_from_db:
            logs[log[0]] = {"Date":log[0],
                            "Action":log[1],
                            "Info":log[2]
            }
    else:
        logs = False


if __name__ == "__main__":
    get_all_users_and_logs_in_start()

    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
    	print(e)
