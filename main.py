from aiogram import Bot, Dispatcher, executor, types
from keyboards import UpdateKeyboard, keyboards, buttons
from config import API_TOKEN, admins, chat_id
import schedule
from multiprocessing.context import Process
import time
import requests
from db_requests import SQLRequests, conn, cursor


r = requests.Session()

#–ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyb = UpdateKeyboard(keyboards, buttons).start_keyboard()
general_admin_keyb = UpdateKeyboard(keyboards, buttons).admin_general_keyboard()

all_users = {}

bot = Bot(API_TOKEN)
dp = Dispatcher(bot)

users_what_pay_access = {}

@dp.message_handler(commands = ['start'])
async def starting (message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start"""
    if message.from_user.id in all_users.keys():
        pass
    else:
        SQLRequests(conn, cursor).write_new_user(message.from_user.id, 
                                                message.from_user.first_name, 
                                                message.from_user.username, 
                                                'Pass', 
                                                'Pass')
        get_all_users_in_start()


    await message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup = start_keyb )

    
@dp.message_handler(lambda message: message.text == "–Ø –æ–ø–ª–∞—Ç–∏–ªüí∞")
async def buy_access(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ø –æ–ø–ª–∞—Ç–∏–ªüí∞"""

    format_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø\n\n"\
                     f"ID: {message.from_user.id}\n"\
                     f"–ò–º—è: {message.from_user.first_name}\n"\
                     f"@{message.from_user.username}\n\n"\
                     f"–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã–¥–∞–µ–º?"
    
    to_admin_keyb = UpdateKeyboard(keyboards, buttons).add_days_button_for_user(str(message.from_user.id))


    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ...")
    await bot.send_message(366954921, format_message, reply_markup=to_admin_keyb)

@dp.callback_query_handler(lambda c: c.data.startswith("add_days_"))
async def add_days_for_user(c: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    cut_c_data_for_add_days = c.data.split("_")

    link = await bot.export_chat_invite_link(chat_id=chat_id)

    link_button = UpdateKeyboard(keyboards, buttons).create_invite_link(cut_c_data_for_add_days[2], link)

    await bot.send_message(int(cut_c_data_for_add_days[2]), f"–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"\
                                                            f"–î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç –Ω–∞ <b>{cut_c_data_for_add_days[3]} –¥–Ω–µ–π</b>\n\n"\
                                                            f"{link}"
                                                            ,parse_mode='html', reply_markup=link_button)



@dp.callback_query_handler(lambda c: c.data.startswith("decline_"))
async def decline_days_for_user(c: types.CallbackQuery):
    cut_c_data = c.data.split('_')
    await bot.delete_message(c.from_user.id, c.message.message_id)

    await bot.send_message(int(cut_c_data[1]), "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    
    await bot.send_message(c.from_user.id, f"–û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –¥–ª—è {cut_c_data[1]}")

    


@dp.message_handler(lambda message: message.text == "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–ºüì≤")
async def communication_with_the_operator(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–ºüì≤"""

    await message.answer("–ó–¥–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")



@dp.message_handler(commands = ['admin'])
async def admin_menu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""

    if message.from_user.id in admins:
        await message.answer("–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=general_admin_keyb)


def get_all_users_in_start():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–ª–æ–≤–∞—Ä—å"""

    users = SQLRequests(conn, cursor).get_users()

    for info in users:
        all_users[info[0]] =     {"ID":info[0], 
                                  "Name":info[1], 
                                  "Username":info[2], 
                                  "Status":info[3],
                                  "Date":info[4]}


if __name__ == "__main__":
    get_all_users_in_start()
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
    	print(e)
