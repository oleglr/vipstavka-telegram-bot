from aiogram import types


keyboards = {

}

buttons = {

}


class UpdateKeyboard():

    def __init__(self, keyboards, buttons):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫"""
        
        self.keyboards = keyboards
        self.buttons = buttons
    
    def start_keyboard(self):
        """–°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        
        start_keyb = keyboards['start_keyboard'] = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        
        start_keyb.row("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–øüîê")
        start_keyb.row("–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–ºüì≤") 
        start_keyb.row("–Ø –æ–ø–ª–∞—Ç–∏–ª/–ø—Ä–æ–¥–ª–∏–ªüí∞")


        return start_keyb
    
    def admin_general_keyboard(self):
        """–°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""

        admin_keyb = keyboards['admin_keyboard'] = types.InlineKeyboardMarkup()
        
        admin_keyb.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="new_malling"))
        admin_keyb.add(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", callback_data="action_history"))
        admin_keyb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º 1 –¥–µ–Ω—å", callback_data="add_all_1_day"))

        return admin_keyb
    
    def add_admin_buttons(self, action):
        """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞, –ø–æ —Ç–∏–ø—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É/–û—Ç–º–Ω–∏—Ç—å/–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ"""
        self.action = action
        
        if self.action == "Malling":
            """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""

            admin_buttons_for_access_malling = keyboards['admin_buttons_for_access_malling'] = types.InlineKeyboardMarkup()

            admin_buttons_for_access_malling.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="access_malling"))
            admin_buttons_for_access_malling.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="decline_malling"))

            return admin_buttons_for_access_malling
        
        elif self.action == "History":
            """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π"""

            admin_buttons_for_sort_history = keyboards['admin_buttons_for_sort_history'] = types.InlineKeyboardMarkup()
            
            admin_buttons_for_sort_history.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ 1 –¥–µ–Ω—å", callback_data="view_history_1"))
            admin_buttons_for_sort_history.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ 7 –¥–Ω–µ–π", callback_data="view_history_7"))
            admin_buttons_for_sort_history.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ 30 –¥–Ω–µ–π", callback_data="view_history_30"))

            return admin_buttons_for_sort_history
        
        elif self.action == "Add_All_1_Day":
            """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"""

            admin_button_for_add_all_one_day = keyboards["admin_button_for_add_all_one_day"] = types.InlineKeyboardMarkup()

            admin_button_for_add_all_one_day.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="access_add_all_one_day"))
            admin_button_for_add_all_one_day.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="decline_add_all_one_day"))

            return admin_button_for_add_all_one_day






    def add_days_button_for_user(self, user):
        """–°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        self.user = user

        add_days_keyboard = keyboards[f'add_days_{self.user}'] = types.InlineKeyboardMarkup(row_width=5)

        self.buttons[f'buttons_{self.user}'] = []

        for i in range(1, 31):
            self.buttons[f'buttons_{self.user}'].append(types.InlineKeyboardButton(text=str(i), callback_data=f"add_days_{self.user}_{str(i)}"))
        
        self.buttons[f"buttons_{self.user}"].append(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"decline_{self.user}"))

        b = self.buttons[f"buttons_{self.user}"]
        
        add_days_keyboard.add(b[0], b[1], b[2], b[3], b[4])
        add_days_keyboard.add(b[5], b[6], b[7], b[8], b[9])
        add_days_keyboard.add(b[10], b[11], b[12], b[13], b[14])
        add_days_keyboard.add(b[15], b[16], b[17], b[18], b[19])
        add_days_keyboard.add(b[20], b[21], b[22], b[23], b[24])
        add_days_keyboard.add(b[25], b[26], b[27], b[28], b[29])
        add_days_keyboard.add(b[30])

        return add_days_keyboard

    
    def create_invite_link(self, user, link):
        """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª"""

        self.user = user
        self.link = link

        link_keyb = keyboards[f"link_{self.user}"] = types.InlineKeyboardMarkup()
        link_keyb.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", url = self.link))

        return link_keyb




